// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  id             String          @id @default(uuid())
  created_at     DateTime        @default(now())
  name           String
  password       String
  username       String          @unique
  studentCourses StudentCourse[]
  studentLessons StudentLesson[]
}

model Teacher {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  name       String
  password   String
  username   String   @unique
  courses    Course[]
}

model Course {
  id          String   @id @default(uuid())
  created_at  DateTime @default(now())
  teacherId   String
  name        String   @unique
  description String
  banner      String
  lessons     Lesson[]

  teacher        Teacher         @relation(fields: [teacherId], references: [id])
  studentCourses StudentCourse[]
}

model Lesson {
  id             String          @id @default(uuid())
  created_at     DateTime        @default(now())
  content        String
  studentLessons StudentLesson[]
  courseId       String?

  Course Course? @relation(fields: [courseId], references: [id])
}

model StudentCourse {
  id         String              @id @default(uuid())
  created_at DateTime            @default(now())
  studentId  String              @unique
  courseId   String              @unique
  status     StudentCourseStatus @default(notStarted)

  student Student @relation(fields: [studentId], references: [id])
  course  Course  @relation(fields: [courseId], references: [id])
}

model StudentLesson {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  studentId  String   @unique
  lessonId   String   @unique
  watched    Boolean  @default(false)

  student Student @relation(fields: [studentId], references: [id])
  lesson  Lesson  @relation(fields: [lessonId], references: [id])
}

enum StudentCourseStatus {
  notStarted
  inProgress
  finished
  approved
}
